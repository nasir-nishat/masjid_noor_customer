import 'package:equatable/equatable.dart';enum PaymentMethod {  cash,  bankTransfer,  due,}enum PaymentStatus {  pending,  paid,  failed,}extension ParseToString on PaymentMethod {  String toShortString() {    return toString().split('.').last;  }}extension PayStatusParseToString on PaymentStatus {  String toShortString() {    return toString().split('.').last;  }}class PaymentMd extends Equatable {  final int paymentId;  final int userId;  final int orderId;  final PaymentMethod? paymentType;  final PaymentStatus? paymentStatus;  final double? amount;  final DateTime? paymentDate;  final DateTime? dueDate;  const PaymentMd({    required this.paymentId,    required this.userId,    required this.orderId,    this.paymentType,    this.paymentStatus,    this.amount,    this.paymentDate,    this.dueDate,  });  @override  List<Object?> get props => [        userId,        orderId,        paymentType,        paymentStatus,        amount,        paymentDate,        dueDate,      ];  factory PaymentMd.fromJson(Map<String, dynamic> json) {    try {      return PaymentMd(        paymentId: json['payment_id'],        userId: json['user_id'],        orderId: json['order_id'],        paymentType: _parsePaymentMethod(json['payment_type']),        paymentStatus: _parsePaymentStatus(json['payment_status']),        amount: json['amount'],        paymentDate: DateTime.parse(json['payment_date']),        dueDate: DateTime.parse(json['due_date']),      );    } on TypeError catch (e, st) {      print("Error: $e, $st");      rethrow;    }  }  Map<String, dynamic> toJson() {    return {      'payment_id': paymentId,      'user_id': userId,      'order_id': orderId,      'payment_type': paymentType?.toString().split('.').last,      'payment_status': paymentStatus?.toString().split('.').last,      'amount': amount,      'payment_date': paymentDate!.toIso8601String(),      'due_date': dueDate!.toIso8601String(),    };  }  static PaymentMethod? _parsePaymentMethod(String? type) {    if (type == null) return null;    return PaymentMethod.values.firstWhere(      (e) => e.toString().split('.').last == type.toLowerCase(),      orElse: () => PaymentMethod.cash,    );  }  static PaymentStatus? _parsePaymentStatus(String? status) {    if (status == null) return null;    return PaymentStatus.values.firstWhere(      (e) => e.toString().split('.').last == status.toLowerCase(),      orElse: () => PaymentStatus.pending,    );  }}