import 'dart:async';import 'package:connectivity_plus/connectivity_plus.dart';import 'package:flutter/material.dart';import 'package:flutter/services.dart';class NetworkService {  List<ConnectivityResult> _connectionStatus = [ConnectivityResult.none];  final Connectivity _connectivity = Connectivity();  late StreamSubscription<List<ConnectivityResult>> _connectivitySubscription;  final _networkStatusController = StreamController<bool>.broadcast();  Stream<bool> get networkStatusStream => _networkStatusController.stream;  NetworkService() {    initConnectivity();    _connectivitySubscription =        _connectivity.onConnectivityChanged.listen(_updateConnectionStatus);  }  Future<void> initConnectivity() async {    late List<ConnectivityResult> result;    try {      result = await _connectivity.checkConnectivity();    } on PlatformException catch (e) {      debugPrint('Couldn\'t check connectivity status $e');      return;    }    return _updateConnectionStatus(result);  }  Future<void> _updateConnectionStatus(List<ConnectivityResult> result) async {    _connectionStatus = result;    bool isConnected = _connectionStatus.contains(ConnectivityResult.mobile) ||        _connectionStatus.contains(ConnectivityResult.wifi);    debugPrint('Connectivity changed: $_connectionStatus');    _networkStatusController.sink.add(isConnected);  }  void dispose() {    _connectivitySubscription.cancel();    _networkStatusController.close();  }}class NetworkAwareWidget extends StatelessWidget {  final NetworkService networkService;  final Widget child;  const NetworkAwareWidget(      {super.key, required this.networkService, required this.child});  @override  Widget build(BuildContext context) {    return StreamBuilder<bool>(      stream: networkService.networkStatusStream,      initialData: true,      builder: (context, snapshot) {        if (snapshot.data == false) {          return Scaffold(            body: Center(              child: Column(                mainAxisAlignment: MainAxisAlignment.center,                children: [                  const Icon(                    Icons.wifi_off,                    size: 100,                    color: Colors.grey,                  ),                  const SizedBox(height: 20),                  const Text(                    'No internet connection',                    style: TextStyle(                      fontSize: 20,                      color: Colors.grey,                    ),                  ),                  const SizedBox(height: 20),                  ElevatedButton(                    onPressed: () async {                      await networkService.initConnectivity();                    },                    child: const Text('Refresh'),                  ),                ],              ),            ),          );        }        return child;      },    );  }}