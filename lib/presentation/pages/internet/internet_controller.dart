import 'dart:async';import 'package:connectivity_plus/connectivity_plus.dart';import 'package:flutter/foundation.dart';import 'package:flutter/services.dart';import 'package:get/get.dart';class ConnectivityController extends GetxController {  final _connectionType = MConnectivityResult.none.obs;  final Connectivity _connectivity = Connectivity();  late StreamSubscription _streamSubscription;  MConnectivityResult get connectionType => _connectionType.value;  set connectionType(value) {    _connectionType.value = value;  }  @override  void onInit() {    super.onInit();    getConnectivityType();    _streamSubscription = _connectivity.onConnectivityChanged.listen(      (event) {        _updateState(event.first);      },    );  }  Future<void> getConnectivityType() async {    List<ConnectivityResult> connectivityResult = [];    try {      connectivityResult = await (_connectivity.checkConnectivity());    } on PlatformException catch (e) {      if (kDebugMode) {        print(e);      }    }    return _updateState(connectivityResult.first);  }  _updateState(ConnectivityResult result) {    switch (result) {      case ConnectivityResult.wifi:        connectionType = MConnectivityResult.wifi;        break;      case ConnectivityResult.mobile:        connectionType = MConnectivityResult.mobile;        break;      case ConnectivityResult.none:        connectionType = MConnectivityResult.none;        break;      default:        print('Failed to get connection type');        break;    }  }  @override  void onClose() {    _streamSubscription.cancel();  }}enum MConnectivityResult { none, wifi, mobile }