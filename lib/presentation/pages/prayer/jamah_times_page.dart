import 'package:flutter/material.dart';import 'package:get/get.dart';import 'package:flutter_screenutil/flutter_screenutil.dart';import 'package:masjid_noor_customer/presentation/pages/prayer/prayer_time_controller.dart';import '../../../mgr/models/jamah_md.dart';class JamahTimesPage extends GetView<PrayerTimesController> {  const JamahTimesPage({super.key});  @override  Widget build(BuildContext context) {    return Scaffold(      appBar: AppBar(        title: const Text('Jamah Times'),        centerTitle: true,      ),      body: Obx(() {        if (controller.jamahs.isEmpty) {          return const Center(child: CircularProgressIndicator());        } else {          return ListView.builder(            itemCount: controller.jamahs.length,            itemBuilder: (context, index) {              JamahMd jamah = controller.jamahs[index];              return Padding(                padding: EdgeInsets.all(12.w),                child: Card(                  elevation: 0,                  shape: RoundedRectangleBorder(                    borderRadius: BorderRadius.circular(15.r),                    side: BorderSide(                      color: Colors.grey.shade300,                      width: 1,                    ),                  ),                  child: Padding(                    padding: EdgeInsets.all(16.w),                    child: Column(                      crossAxisAlignment: CrossAxisAlignment.start,                      children: [                        _buildHeader(jamah.spotName, jamah.spotLocation),                        SizedBox(height: 16.h),                        _buildPrayerTimes(jamah, context),                        SizedBox(height: 10.h),                        if (jamah.otherJamah != null &&                            jamah.otherJamah!.isNotEmpty)                          _buildAdditionalPrayers(jamah.otherJamah!, context),                      ],                    ),                  ),                ),              );            },          );        }      }),    );  }  Widget _buildHeader(String spotName, String spotLocation) {    return Column(      crossAxisAlignment: CrossAxisAlignment.start,      children: [        Text(          spotName,          style: TextStyle(            fontSize: 22.sp,            fontWeight: FontWeight.bold,            color: Colors.teal.shade800,          ),        ),        SizedBox(height: 4.h),        Text(          spotLocation,          style: TextStyle(            fontSize: 14.sp,            color: Colors.grey.shade600,          ),        ),      ],    );  }  Widget _buildPrayerTimes(JamahMd jamah, BuildContext context) {    return Column(      children: [        _buildPrayerTimeRow('Fajr', jamah.fajr, context),        _buildPrayerTimeRow('Dhuhr', jamah.duhr, context),        _buildPrayerTimeRow('Asr', jamah.asr, context),        _buildPrayerTimeRow('Maghrib', jamah.magrib, context),        _buildPrayerTimeRow('Isha', jamah.isha, context),      ],    );  }  Widget _buildPrayerTimeRow(      String prayerName, TimeOfDay? time, BuildContext context) {    return Padding(      padding: EdgeInsets.symmetric(vertical: 6.h),      child: Row(        mainAxisAlignment: MainAxisAlignment.spaceBetween,        children: [          Text(            prayerName,            style: TextStyle(              fontWeight: FontWeight.w600,              fontSize: 16.sp,            ),          ),          Text(            time != null ? time.format(context) : 'N/A',            style: TextStyle(              fontSize: 16.sp,              color: Colors.teal.shade700,            ),          ),        ],      ),    );  }  Widget _buildAdditionalPrayers(      List<Map<String, dynamic>> otherJamah, BuildContext context) {    return Column(      crossAxisAlignment: CrossAxisAlignment.start,      children: otherJamah.map((j) {        TimeOfDay time = TimeOfDay(          hour: int.parse(j['time'].split(':')[0]),          minute: int.parse(j['time'].split(':')[1]),        );        return Padding(          padding: EdgeInsets.only(top: 8.h),          child: Row(            mainAxisAlignment: MainAxisAlignment.spaceBetween,            children: [              Text(                j['name'] ?? '',                style: TextStyle(                  fontWeight: FontWeight.w600,                  fontSize: 14.sp,                ),              ),              Text(                time.format(context),                style: TextStyle(                  fontSize: 14.sp,                  color: Colors.teal.shade700,                ),              ),            ],          ),        );      }).toList(),    );  }}