import 'package:masjid_noor_customer/presentation/pages/all_export.dart';class SearchProductController extends GetxController {  static SearchProductController get to => Get.find();  RxList<ProductMd> searchedProducts = <ProductMd>[].obs;  RxBool isSearchLoading = false.obs;  RxBool hasMoreResults = false.obs;  RxInt currentPage = 1.obs;  final int pageSize = 20;  Future<void> searchProducts(String query) async {    isSearchLoading.value = true;    currentPage.value = 1;    searchedProducts.clear();    hasMoreResults.value = true;    try {      List<ProductMd> srchPrds =          await ApiService().searchProducts(query, pageSize, currentPage.value);      searchedProducts.value = srchPrds;      if (srchPrds.length < pageSize) {        hasMoreResults.value = false;      }    } catch (e) {      debugPrint("Error searching products: $e");      hasMoreResults.value = false;    } finally {      isSearchLoading.value = false;    }  }  Future<void> loadMoreSearchProducts(String query) async {    if (isSearchLoading.value || !hasMoreResults.value) return;    isSearchLoading.value = true;    currentPage.value++;    try {      List<ProductMd> fetchedProducts = await ApiService().searchProducts(        query,        pageSize,        currentPage.value,      );      if (fetchedProducts.isNotEmpty) {        searchedProducts.addAll(fetchedProducts);        if (fetchedProducts.length < pageSize) {          hasMoreResults.value = false;        }      } else {        hasMoreResults.value = false;      }    } catch (e) {      debugPrint("Error loading more search products: $e");      hasMoreResults.value = false;    } finally {      isSearchLoading.value = false;    }  }}