import 'package:flutter/material.dart';import 'package:flutter_screenutil/flutter_screenutil.dart';import 'package:get/get.dart';import 'package:go_router/go_router.dart';import 'package:google_sign_in/google_sign_in.dart';import 'package:masjid_noor_customer/mgr/models/order_md.dart';import 'package:masjid_noor_customer/navigation/router.dart';import 'package:masjid_noor_customer/presentation/pages/user/user_controller.dart';import 'package:mask_text_input_formatter/mask_text_input_formatter.dart';import 'package:url_launcher/url_launcher.dart';import 'package:share_plus/share_plus.dart';class ProfilePage extends GetView<UserController> {  const ProfilePage({super.key});  @override  Widget build(BuildContext context) {    return SingleChildScrollView(      child: _buildActions(context),    );  }  Widget _buildActions(BuildContext context) {    return Column(      crossAxisAlignment: CrossAxisAlignment.start,      children: [        Text('Profile'),        ListTile(          leading: const Icon(Icons.person),          title: Text(              'Name: ${controller.user.firstName} ${controller.user.lastName}'),          onTap: () {            print(AuthenticationNotifier.instance.getUser());          },        ),        ListTile(          leading: const Icon(Icons.email),          title: Text('Email: ${controller.user.email}'),        ),        ListTile(          leading: const Icon(Icons.phone),          title: Text('Phone: ${controller.user.phoneNumber}'),          onTap: () {            _showChangePhoneNumberDialog(context);          },        ),        ListTile(          leading: const Icon(Icons.shopping_cart),          title: const Text('Orders'),          onTap: () {            context.go(Routes.order);          },        ),        ListTile(          leading: const Icon(Icons.call),          title: const Text('Call Customer Care'),          onTap: () {            _callCustomerCare();          },        ),        ListTile(          leading: const Icon(Icons.share),          title: const Text('Share App'),          onTap: () {            _shareApp();          },        ),        ListTile(          leading: const Icon(Icons.policy),          title: const Text('Terms & Privacy'),          onTap: () {            _showTermsAndPrivacy(context);          },        ),        ListTile(          leading: const Icon(Icons.logout),          title: const Text('Logout'),          onTap: () {            AuthenticationNotifier.instance.logout().then((value) {              GoogleSignIn().disconnect();              context.go(Routes.home);            });          },        ),      ],    );  }  Future<void> _showChangePhoneNumberDialog(BuildContext context) async {    final phoneController =        TextEditingController(text: controller.user.phoneNumber);    final maskFormatter = MaskTextInputFormatter(      mask: '### #### ####',      filter: {"#": RegExp(r'[0-9]')},    );    await showDialog(      context: context,      builder: (context) {        return AlertDialog(          title: const Text('Change Phone Number'),          content: TextField(            controller: phoneController,            decoration: const InputDecoration(labelText: 'Phone Number'),            inputFormatters: [maskFormatter],            keyboardType: TextInputType.phone,          ),          actions: [            TextButton(              onPressed: () {                controller.updatePhoneNumber(phoneController.text);                Navigator.of(context).pop();              },              child: const Text('Submit'),            ),          ],        );      },    );  }  Future<void> _showOrderDetailsDialog(      BuildContext context, OrderDetails order) async {    await showDialog(      context: context,      builder: (context) {        return AlertDialog(          title: Text('Order #${order.id} Details'),          content: Column(            mainAxisSize: MainAxisSize.min,            children: [              Text('Total Amount: \$${order.totalAmount}'),              Text('Status: ${order.status}'),              Text('Created At: ${order.createdAt}'),              ...order.items.map((item) => ListTile(                    title: Text('Product ID: ${item.productId}'),                    subtitle: Text(                        'Quantity: ${item.quantity}, Price: \$${item.totalPrice}'),                  )),            ],          ),          actions: [            TextButton(              onPressed: () {                Navigator.of(context).pop();              },              child: const Text('Close'),            ),          ],        );      },    );  }  Future<void> _callCustomerCare() async {    Uri _url = Uri(scheme: 'tel');    if (!await launchUrl(_url)) {      throw Exception('Could not launch $_url');    }  }  void _shareApp() {    Share.share('Check out this amazing app: <app link>');  }  void _showTermsAndPrivacy(BuildContext context) {    showDialog(      context: context,      builder: (context) {        return AlertDialog(          title: const Text('Terms & Privacy'),          content: const SingleChildScrollView(            child: Column(              children: [                Text('Terms of Service...'),                SizedBox(height: 10),                Text('Privacy Policy...'),              ],            ),          ),          actions: [            TextButton(              onPressed: () {                Navigator.of(context).pop();              },              child: const Text('Close'),            ),          ],        );      },    );  }}