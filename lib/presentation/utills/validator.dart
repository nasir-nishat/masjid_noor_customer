class Validator {  static String? requiredValidator(String? value) {    if (value == null || value.isEmpty) {      return 'Please enter a value.';    }    return null; // No validation error  }  static String? numberValidator(String? value) {    if (value == null || value.isEmpty) {      return 'Please enter a value.';    }    final number = num.tryParse(value);    if (number == null) {      return 'Please enter a valid number.';    }    if (number < 0) {      return 'Number cannot be negative.';    }    return null; // No validation error  }  static String? dropdownValidator(String? value) {    if (value == null || value.isEmpty) {      return 'Please select a value.';    }    return null; // No validation error  }  static String? emailValidator(String? value) {    if (value == null || value.isEmpty) {      return 'Please enter a value.';    }    final emailRegex = RegExp(r'^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$');    if (!emailRegex.hasMatch(value)) {      return 'Please enter a valid email address.';    }    return null; // No validation error  }  static String? passwordValidator(String? value) {    if (value == null || value.isEmpty) {      return 'Please enter a value.';    }    if (value.length < 6) {      return 'Password must be at least 6 characters long.';    }    return null; // No validation error  } //Search validator at least need 3 characters and string and number  static String? searchValidator(String? value) {    if (value == null || value.isEmpty) {      return 'Please enter a value.';    }    if (value.length < 3) {      return 'Search must be at least 3 characters long.';    }    return null;  }  static String? phoneValidator(String? value, {bool required = true}) {    if (value == null || value.isEmpty) {      return 'Please enter a value.';    }    final phoneRegex = RegExp(r'^[0-9]{10}$');    if (!phoneRegex.hasMatch(value)) {      return 'Please enter a valid phone number.';    }    return null; // No validation error  }}