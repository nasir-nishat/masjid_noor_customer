import 'package:intl/intl.dart';import 'package:masjid_noor_customer/presentation/pages/all_export.dart';import 'package:masjid_noor_customer/presentation/utills/extensions.dart';import 'package:masjid_noor_customer/presentation/widgets/single_image_viewer.dart';class CartItem extends StatelessWidget {  final CartMd cartProd;  final VoidCallback onIncrease;  final VoidCallback onDecrease;  final VoidCallback onRemove;  final bool isKiosk;  const CartItem({    super.key,    required this.cartProd,    required this.onIncrease,    required this.onDecrease,    required this.onRemove,    this.isKiosk = false,  });  @override  Widget build(BuildContext context) {    return isKiosk ? kioskItem(context) : item(context);  }  Widget item(BuildContext context) {    return Row(      children: [        if (cartProd.product.images == null || cartProd.product.images!.isEmpty)          Container(            width: 100.w,            height: 100.h,            decoration: BoxDecoration(              color: Colors.grey[200],              borderRadius: BorderRadius.circular(10.r),              image: const DecorationImage(                image: AssetImage('assets/no_image.png') as ImageProvider,                fit: BoxFit.cover,              ),            ),          )        else          SingleImagesViewer(            imageUrl: cartProd.product.images!.first,            height: 100.h,            width: 100.w,          ),        const SizedBox(width: 10),        Expanded(          child: SpacedColumn(            crossAxisAlignment: CrossAxisAlignment.start,            verticalSpace: 10.h,            children: [              Text(cartProd.product.name, style: context.textTheme.labelLarge),              SpacedRow(                mainAxisAlignment: MainAxisAlignment.spaceBetween,                crossAxisAlignment: CrossAxisAlignment.center,                horizontalSpace: 5.w,                children: [                  GestureDetector(                      onTap: onIncrease,                      child: Container(                          decoration: BoxDecoration(                            color: Colors.white,                            border: Border.all(color: Colors.black38),                            shape: BoxShape.circle,                          ),                          child: const HeroIcon(HeroIcons.plus))),                  SizedBox(                    width: 40.w,                    child: Center(                        child: Text((cartProd.quantity).toString(),                            style: context.textTheme.labelMedium?.copyWith(                              color: Colors.black,                              fontSize: 18,                              fontWeight: FontWeight.bold,                            ))),                  ),                  GestureDetector(                      onTap: onDecrease,                      child: Container(                          decoration: BoxDecoration(                            color: Colors.white,                            border: Border.all(color: Colors.black38),                            shape: BoxShape.circle,                          ),                          child: const HeroIcon(HeroIcons.minus))),                ],              ),              Text(getPrice(), style: context.textTheme.labelMedium),            ],          ),        ),        IconButton(          icon: const HeroIcon(HeroIcons.trash),          onPressed: onRemove,        ),      ],    );  }  Widget kioskItem(BuildContext context) {    return SpacedColumn(      crossAxisAlignment: CrossAxisAlignment.start,      children: [        Row(          children: [            if (cartProd.product.images == null ||                cartProd.product.images!.isEmpty)              Container(                height: 40.h,                width: 40.h,                decoration: BoxDecoration(                  color: Colors.grey[200],                  borderRadius: BorderRadius.circular(10.r),                  image: const DecorationImage(                    image: AssetImage('assets/no_image.png') as ImageProvider,                    fit: BoxFit.cover,                  ),                ),              )            else              SingleImagesViewer(                imageUrl: cartProd.product.images!.first,                height: 40.h,                width: 40.h,              ),            SizedBox(width: 10.w),            SizedBox(                width: 138.w,                child: Text(cartProd.product.name,                    overflow: TextOverflow.ellipsis,                    maxLines: 2,                    style: TextStyle(                      fontSize: 12.sp,                      fontWeight: FontWeight.bold,                    )))          ],        ),        SpacedRow(          crossAxisAlignment: CrossAxisAlignment.center,          horizontalSpace: 5.w,          children: [            GestureDetector(                onTap: onIncrease,                child: Container(                    decoration: BoxDecoration(                      color: Colors.white,                      border: Border.all(color: Colors.black38),                      shape: BoxShape.circle,                    ),                    child: const HeroIcon(HeroIcons.plus))),            SizedBox(              width: 40.w,              child: Center(                  child: Text((cartProd.quantity).toString(),                      style: context.textTheme.labelMedium?.copyWith(                        color: Colors.black,                        fontSize: 18,                        fontWeight: FontWeight.bold,                      ))),            ),            GestureDetector(                onTap: onDecrease,                child: Container(                    decoration: BoxDecoration(                      color: Colors.white,                      border: Border.all(color: Colors.black38),                      shape: BoxShape.circle,                    ),                    child: const HeroIcon(HeroIcons.minus))),            const Spacer(),            IconButton(              icon: const HeroIcon(HeroIcons.trash),              onPressed: onRemove,            ),          ],        ),        Text(getPrice(), style: TextStyle(fontSize: 12.sp)),      ],    );  }  String getPrice() {    String prodP = cartProd.product.sellPrice.toCurrency();    String prodQ = cartProd.quantity.toString();    double total = cartProd.product.sellPrice * cartProd.quantity;    String prodT = total.toCurrency();    return "$prodP x $prodQ = $prodT";  }}